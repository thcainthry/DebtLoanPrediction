# -*- coding: utf-8 -*-
"""loan_approval.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H3Kp-O-5p9kc1qy5w1FlQ1XMMYPQF2Ip
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier

file_path = "Loan_Status_Prediction_Data.csv"

loan_dataset = pd.read_csv(file_path)

loan_dataset.head()

#numri i rreshtave dhe kolonave
loan_dataset.shape

#pershkrim i majteve qe kane vlera numerike
loan_dataset.describe()

#e kontrollojme nese kane vlera null ose jo ne secilen kolone
loan_dataset.isnull().sum()

#i bejme drop apo i heqim ato te cilat veqse kane vlera null
loan_dataset = loan_dataset.dropna()

loan_dataset.isnull().sum()

#marrim info rreth tabeles se te dhenave prap
loan_dataset.head()
#shohim qe kemi vlera qe nuk jane numerike

loan_dataset.replace({"Loan_Status":{'N':0,'Y':1}},inplace=True)
#kemi bere zevendesimin tek loan status N me 0 dhe Y me 1

loan_dataset.head()

loan_dataset['Dependents'].value_counts()
#e shohim tek bashkhuamarresit sa jane ne secilen kategori dhe verejme se kemi vlera 3+

#e zevendesojme 3+ me 4
loan_dataset = loan_dataset.replace(to_replace='3+', value='4')

#kontrollojme nese jane zevendesu
loan_dataset['Dependents'].value_counts()

#vizualizimi i te dhenave te statusit te kredise ne baze te edukimit
sns.countplot(x='Education', hue = 'Loan_Status', data = loan_dataset)

sns.countplot(x='Married', hue = 'Loan_Status', data = loan_dataset)

#konvertimi i kolonave me kategori qe kane qene sikurse i matruar / jo i martuar
#ne vlera numerike 1 dhe 0
loan_dataset.replace({'Married':{'No':0,'Yes':1},'Gender':{'Male':1, 'Female':0},'Self_Employed':{'No':1, 'Yes':0},'Property_Area':{'Rural':0, 'Semiurban':1, 'Urban':2},'Education':{'Graduate':1, 'Not Graduate':0}},inplace = True)

loan_dataset.head()

#ndarja e te dhenave dhe etiketimi apo labeling
#drop unnecessary columns the axis = 1 si dhe loan status masi kemi me ba predict
X = loan_dataset.drop(columns=['Loan_ID','Loan_Status'], axis = 1)
#reprezenton target variablat ose output variablat prandaj i'a japim Y vleren e kolones
Y = loan_dataset['Loan_Status']

print(X)
print(Y)

#training and testing setet, 0.1 indikator qe 10% e te dhenave perdoren per testin 90% per trajnim
#stratify e ben qe edhe test seti edhe training sete me pas proporcion te njejte te klasave
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size = 0.1, stratify = Y, random_state = 3)

print(X_train, Y_train)

model = LogisticRegression()
model.fit(X_train, Y_train)
y_hat = model.predict(X_test)

accuracy = accuracy_score(Y_test, y_hat)
print(accuracy)


model_two = RandomForestClassifier()
model_two.fit(X_train,Y_train)
y_hat_two = model_two.predict(X_test)
accuracy_two = accuracy_score(Y_test,y_hat_two)
print(accuracy_two)


knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(X_train, Y_train)
y_hat_knn = knn_model.predict(X_test)
accuracy_knn = accuracy_score(Y_test, y_hat_knn)
print(accuracy_knn)
